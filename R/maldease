#!/usr/bin/env Rscript

for (pkg in c(
  "docopt",
  "MALDIquant",
  "MALDIquantForeign",
  "optparse",
  "magrittr",
  "readr",
  "purrr",
  "here",
  "stringr",
  "tibble",
  "tidyr",
  "dplyr",
  "ggplot2",
  "writexl"
)) {
  suppressPackageStartupMessages(library(pkg, character.only = TRUE))
}

script_loc <-
    commandArgs(trailingOnly=FALSE) %>%
    keep(~str_detect(.x, "--file")) %>%
    str_remove("--file=") %>%
    tools::file_path_as_absolute()

project_loc <-
    script_loc %>%
    str_split(.Platform$file.sep) %>%
    unlist() %>%
    `[`(., 1:(length(.)-2)) %>%
    paste(collapse=.Platform$file.sep)

description_path <- file.path(project_loc, "DESCRIPTION")
# suppressMessages(here::i_am("R/maldease.R"))
arguments <- function() {

  parse_range <- function(range_str) {

    parsed_ranges <-
      range_str %>%
      str_split("\\s*,\\s*", simplify = TRUE) %>%
      str_split("-") %>%
      map(as.double) %>%
      map(sort)

    parsed_ranges
  }

  doc <- "maldease

  Usage:
    maldease --input=<path> --negative-control=<path> --output=<path> [options]
    maldease (-h | --help)

  Options:
    -h --help                            Print this help and exit
    -v --version                         Print program version and exit
    -i <path --input=<path>              Path to experimental MALDI results
    -n <path> --negative-control=<path>  Path to negative control MALDI results
    -o <path> --output=<path>            Output directory path
    --half-window-size=<int>             Half-window size for smoothing and peak
                                         detection [default: 20]
    --include-only=<ranges>              Consider only these mass ranges for
                                         peak reporting. Lower and upper bounds
                                         are inclusive and separated by a dash.
                                         Multiple ranges can be specified and
                                         are comma delimited,
                                         e.g.--include-only \'123-456,1000-2000\'
                                         [default: 0-Inf]
    --definitions=<files>...             One or more paths to tab-separated
                                         defintions of target peaks
  "

  args <- docopt(doc, version = get_version())

  args[["--include-only"]] <- parse_range(args[["--include-only"]])

  # Make numeric arguments the correct type
  args[["--half-window-size"]] <- as.integer(args[["--half-window-size"]])

  args
}

main <- function() {

  args <- arguments()

  analysis_time <- Sys.time()
  analysis_params <- format_analysis_parameters(args, analysis_time)

  experiment_spectra <- load_spectra(args[["--input"]], FALSE)

  negative_spectra <- load_spectra(args[["--negative-control"]], FALSE)

  neg_sample_name <-
    map_chr(negative_spectra, ~ metaData(.x)$sampleName) %>%
    unique()

  spectra <- c(experiment_spectra, negative_spectra)


  target_definitions <- load_definitions(args[["--definitions"]])

  normalized_spectra <-
    preprocess_spectra(spectra, args[["--half-window-size"]])

  samples_avgSpectra <-
    average_technical_replicates(normalized_spectra)

  samples <- samples_avgSpectra$sample_names
  avg_spectra <- samples_avgSpectra$avg_spectra

  peaks_noise <-
    peak_detection_spectra(avg_spectra, 3, args[["--half-window-size"]])

  combined_peaks <- combine_peaks_and_call_positives(peaks_noise$peaks,
                                                     neg_sample_name,
                                                     args[["--include-only"]])

  spectrum_plot <- draw_plots(avg_spectra,
                              peaks_noise$peaks,
                              args[["--include-only"]],
                              analysis_time)

  calls <- call_positives(combined_peaks, target_definitions, neg_sample_name)

  write_output(spectrum_plot,
               combined_peaks,
               analysis_params,
               calls,
               args[["--output"]])

}

get_version <- function() {
  version <-
    read_lines(description_path) %>%
    keep(~ grepl("Version", .x)) %>%
    str_split(": ") %>%
    unlist() %>%
    .[2] %>%
    paste("maldease", ., "\n")

  version
}

load_spectra <- function(results_path, verbose) {

    spectra <-
      if (verbose) {
        MALDIquantForeign::import(results_path)
      } else {
        suppressWarnings({
          MALDIquantForeign::import(results_path)
        })
      }


    non_empty <-
      spectra %>%
      map_lgl(isEmpty) %>%
      all() %>%
      not()

    regular <-
      spectra %>%
      map_lgl(isRegular)

    if ((!non_empty) && regular) {
      cat("Input data are malformed\n")
      quit(save = "no", status = 1)
    }

    spectra
  }

load_definitions <- function(additional_path) {

  # definition file format (no headers, comma-delimited):
  # name1,mass,mass_tolerance
  # name1,mass,mass_tolerance
  # name2,mass,mass_tolerance
  # etc

  # definitions_files <-
  #   here("data") %>%
  #   list.files(full.names = TRUE)

  if (!is.null(additional_path)) {
    definitions_files <- additional_path
  }

  definitions <-
    definitions_files %>% map_dfr(~ read_tsv(.x, col_types = "cdd"))

  definitions
}

preprocess_spectra <- function(spectra, half_window_size) {
  transformed_spectra <-
    spectra %>%
    # transformIntensity(method = "sqrt") %>%
    suppressWarnings({
      smoothIntensity(., method = "SavitzkyGolay",
                      halfWindowSize = half_window_size)
    })


  baseline_estimates <-
    map(transformed_spectra, function(spectrum) {
      estimateBaseline(spectrum, method = "SNIP", iterations = 100)
    })
  normalized_spectra <-
    transformed_spectra %>%
    removeBaseline(method = "SNIP", iterations = 100) %>%
    # calibrateIntensity(method = "TIC") %>%
    alignSpectra(
      halfWindowSize = half_window_size,
      SNR = 3,
      tolerance = 0.02,
      noiseMethod="SuperSmoother",
      warpingMethod = "lowess"
    )
  normalized_spectra
}

average_technical_replicates <- function(spectra) {
  samples <-
    factor(map_chr(spectra, function(x) {
      metaData(x)$sampleName
    }))

  avg_spectra <-
    averageMassSpectra(spectra, labels = samples, method = "mean")

  list(
    "sample_names" = map_chr(avg_spectra, ~ metaData(.x)$sampleName),
    "avg_spectra" = avg_spectra
  )
}

peak_detection_spectrum <-  function(spectrum,
                                     signal_to_noise_ratio,
                                     half_window_size) {
    peaks <-
      spectrum %>%
      detectPeaks(method = "SuperSmoother",
                  halfWindowSize = half_window_size,
                  SNR = signal_to_noise_ratio) %>%
      binPeaks(method="relaxed", tolerance = 0.002) %>%
      filterPeaks(minFrequency = 0.25)

    peaks
  }

peak_detection_spectra <- function(spectra,
                                   signal_to_noise_ratio,
                                   half_window_size) {
    noises <- map(spectra, ~ estimateNoise(.x, method = "SuperSmoother"))

    peaks <-
      detectPeaks(spectra,
                  noiseMethod = "SuperSmoother",
                  halfWindowSize = half_window_size,
                  SNR = signal_to_noise_ratio) %>%
      binPeaks(tolerance = 0.002) %>%
      filterPeaks(minFrequency = 0.25)

    list("noise" = noises, "peaks" = peaks)
  }

filter_mass_on_ranges <- function(mass_spec_table, incl_ranges) {

  map_dfr(incl_ranges, ~ filter(mass_spec_table, between(mass, .x[1], .x[2])))
}

get_intensity_table <- function(spectra, peaks, samples, incl_ranges) {
  m <- intensityMatrix(peaks, spectra)
  mz <- attr(m, "mass")

  mass_snr <-
    map_dfr(peaks,
            ~ tibble(
              sample = .x@metaData$sampleName,
              mass = .x@mass,
              snr = .x@snr
            ))

  intensity_table <-
    t(m) %>%
    as_tibble(.name_repair = "minimal") %>%
    set_colnames(samples) %>%
    mutate(mass = mz) %>%
    pivot_longer(-mass,
                 names_to = "sample",
                 values_to = "intensity") %>%
    left_join(mass_snr, by = c("mass", "sample")) %>%
    mutate(noise = intensity / snr) %>%
    drop_na() %>%
    filter_mass_on_ranges(incl_ranges)

  intensity_table
}

combine_peaks_and_call_positives <- function(peaks, negative_sample_name, incl_ranges) {

  neg_idx <-
    peaks %>%
    map_lgl(~ metaData(.x)$sampleName == negative_sample_name) %>%
    which()

  exp_idx <- if (neg_idx == 1) {2} else {1}

  n <- peaks[[neg_idx]]
  e <- peaks[[exp_idx]]

  experimental_sample_name <- metaData(e)$sampleName

  merged <-
    data.frame("mass" = e@mass, e = e@intensity) %>%
    full_join(
      data.frame("mass" = n@mass, n = n@intensity),
      by = c("mass" = "mass")
    ) %>%
    arrange(mass) %>%
    mutate(
      SNR = case_when(
        is.na(e) ~ 0,
        is.na(n) ~ Inf,
        TRUE     ~ e / n
      ),
      is_positive = SNR > 3) %>%
    filter_mass_on_ranges(incl_ranges)

  colnames(merged) <- c("mass", experimental_sample_name,
                        negative_sample_name, "SNR", "is_positive")

  merged
}

draw_plots <- function(spectra, peaks, incl_ranges, analysis_time) {

  peak_tables <-
    map_dfr(
      peaks,
      ~ tibble(
        sample = .x@metaData$sampleName,
        mass = .x@mass,
        peak_intensity = .x@intensity
      )
    ) %>%
    filter_mass_on_ranges(incl_ranges)

  spectrum_tables <- imap_dfr(spectra,
                              ~ tibble(
                                sample = .y,
                                mass = .x@mass,
                                intensity = .x@intensity)
                              )

  p <-
    ggplot(spectrum_tables, aes(x = mass, y = intensity)) +
    geom_line() +
    geom_point(
      data = peak_tables,
      aes(x = mass, y = peak_intensity),
      shape = 4,
      colour = "red"
    ) +
    labs(title = analysis_time) +
    facet_wrap( ~ sample,
                ncol = 1,
                scales = "fixed") +
    theme_linedraw()

  p
}

format_analysis_parameters <- function(arg, analysis_time) {

  analysis_time_str <- paste("analysis_time", analysis_time, sep = ": ")
  cli_args <- paste(names(arg), arg, sep = ": ", collapse = "\n")

  analysis_parameters_log <- paste(analysis_time_str, cli_args, "", sep = "\n")

  analysis_parameters_log
}

call_positives <- function(intensity_table, target_definitions, negative_sample_name) {

  potential_peaks <- intensity_table %>% filter(is_positive)

  target_definitions %>%
    mutate(
      lower = mass - tolerance,
      upper = mass + tolerance,
    ) %>%
    rowwise() %>%
    mutate(
      positive = between(potential_peaks$mass, lower, upper) %>% any()
    ) %>%
    select(target, mass, positive)
}

write_output <- function(spectrum_plot, intensity_table, params, calls, outpath) {
  if (!dir.exists(outpath)) {
    dir.create(outpath)
  }

  plot_path <- file.path(outpath, "mass_spectrum.png")
  table_path <- file.path(outpath, "intensity_table.tsv")
  excel_path <- file.path(outpath, "intensity_table.xlsx")
  params_path <- file.path(outpath, "params.txt")
  calls_path <- file.path(outpath, "calls.tsv")

  ggsave(
    filename = plot_path,
    plot = spectrum_plot,
    height = 15,
    width = 30,
    units = "cm"
  )

  write_tsv(intensity_table, table_path)
  write_tsv(calls, calls_path)
  write_xlsx(intensity_table, excel_path)
  write_lines(params, params_path)
}

main()
